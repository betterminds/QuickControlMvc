// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.betterminds.model;

import br.com.betterminds.model.Endereco;
import br.com.betterminds.model.EnderecoDataOnDemand;
import br.com.betterminds.model.TelefoneDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EnderecoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EnderecoDataOnDemand: @Component;
    
    private Random EnderecoDataOnDemand.rnd = new SecureRandom();
    
    private List<Endereco> EnderecoDataOnDemand.data;
    
    @Autowired
    TelefoneDataOnDemand EnderecoDataOnDemand.telefoneDataOnDemand;
    
    public Endereco EnderecoDataOnDemand.getNewTransientEndereco(int index) {
        Endereco obj = new Endereco();
        setLogradouro(obj, index);
        setNumero(obj, index);
        return obj;
    }
    
    public void EnderecoDataOnDemand.setLogradouro(Endereco obj, int index) {
        String logradouro = "logradouro_" + index;
        if (logradouro.length() > 100) {
            logradouro = logradouro.substring(0, 100);
        }
        obj.setLogradouro(logradouro);
    }
    
    public void EnderecoDataOnDemand.setNumero(Endereco obj, int index) {
        Integer numero = new Integer(index);
        obj.setNumero(numero);
    }
    
    public Endereco EnderecoDataOnDemand.getSpecificEndereco(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Endereco obj = data.get(index);
        Long id = obj.getId();
        return Endereco.findEndereco(id);
    }
    
    public Endereco EnderecoDataOnDemand.getRandomEndereco() {
        init();
        Endereco obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Endereco.findEndereco(id);
    }
    
    public boolean EnderecoDataOnDemand.modifyEndereco(Endereco obj) {
        return false;
    }
    
    public void EnderecoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Endereco.findEnderecoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Endereco' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Endereco>();
        for (int i = 0; i < 10; i++) {
            Endereco obj = getNewTransientEndereco(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
